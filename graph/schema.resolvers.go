package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"errors"
	"fmt"
	"strings"

	model1 "github.com/izumarth/go-graphql-example/graph/model"
	internal1 "github.com/izumarth/go-graphql-example/internal"
)

// Author is the resolver for the author field.
func (r *issueResolver) Author(ctx context.Context, obj *model1.Issue) (*model1.User, error) {
	thunk := r.Loaders.UserLoader.Load(ctx, obj.Author.ID)
	user, err := thunk()
	if err != nil {
		return nil, err
	}
	return user, nil
}

// AddProjectV2ItemByID is the resolver for the addProjectV2ItemById field.
func (r *mutationResolver) AddProjectV2ItemByID(ctx context.Context, input model1.AddProjectV2ItemByIDInput) (*model1.AddProjectV2ItemByIDPayload, error) {
	panic(fmt.Errorf("not implemented: AddProjectV2ItemByID - addProjectV2ItemById"))
}

// Owner is the resolver for the owner field.
func (r *projectV2Resolver) Owner(ctx context.Context, obj *model1.ProjectV2) (*model1.User, error) {
	panic(fmt.Errorf("not implemented: Owner - owner"))
}

// Repository is the resolver for the repository field.
func (r *queryResolver) Repository(ctx context.Context, name string, owner string) (*model1.Repository, error) {
	user, err := r.Srv.GetUserByName(ctx, owner)
	if err != nil {
		return nil, err
	}

	return r.Srv.GetRepoByFullName(ctx, user.ID, name)
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, name string) (*model1.User, error) {
	return r.Srv.GetUserByName(ctx, name)
}

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id string) (model1.Node, error) {
	nElems := strings.SplitN(id, "_", 2)
	nType, _ := nElems[0], nElems[1]

	switch nType {
	case "U":
		return r.Srv.GetUserById(ctx, id)
	default:
		return nil, errors.New("invalid ID")
	}
}

// Owner is the resolver for the owner field.
func (r *repositoryResolver) Owner(ctx context.Context, obj *model1.Repository) (*model1.User, error) {
	return r.Srv.GetUserById(ctx, obj.Owner.ID)
}

// Issue is the resolver for the issue field.
func (r *repositoryResolver) Issue(ctx context.Context, obj *model1.Repository, number int) (*model1.Issue, error) {
	return r.Srv.GetIssueByRepoAndNumber(ctx, obj.ID, number)
}

// Issues is the resolver for the issues field.
func (r *repositoryResolver) Issues(ctx context.Context, obj *model1.Repository, after *string, before *string, first *int, last *int) (*model1.IssueConnection, error) {
	return r.Srv.ListIssueInRepository(ctx, obj.ID, after, before, first, last)
}

// PullRequest is the resolver for the pullRequest field.
func (r *repositoryResolver) PullRequest(ctx context.Context, obj *model1.Repository, number int) (*model1.PullRequest, error) {
	panic(fmt.Errorf("not implemented: PullRequest - pullRequest"))
}

// PullRequests is the resolver for the pullRequests field.
func (r *repositoryResolver) PullRequests(ctx context.Context, obj *model1.Repository, after *string, before *string, first *int, last *int) (*model1.PullRequestConnection, error) {
	panic(fmt.Errorf("not implemented: PullRequests - pullRequests"))
}

// Issue returns internal1.IssueResolver implementation.
func (r *Resolver) Issue() internal1.IssueResolver { return &issueResolver{r} }

// Mutation returns internal1.MutationResolver implementation.
func (r *Resolver) Mutation() internal1.MutationResolver { return &mutationResolver{r} }

// ProjectV2 returns internal1.ProjectV2Resolver implementation.
func (r *Resolver) ProjectV2() internal1.ProjectV2Resolver { return &projectV2Resolver{r} }

// Query returns internal1.QueryResolver implementation.
func (r *Resolver) Query() internal1.QueryResolver { return &queryResolver{r} }

// Repository returns internal1.RepositoryResolver implementation.
func (r *Resolver) Repository() internal1.RepositoryResolver { return &repositoryResolver{r} }

type issueResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type projectV2Resolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type repositoryResolver struct{ *Resolver }
